package com.sisyphus;

import java.util.ArrayList;

public class Commands {	
	
	private static final int PPL = 0;
	private static final int RES = 1;
	
	private static String invalid = "Invalid token ";
	
	public static String processCommand(ArrayList<String> commandArray, ArrayList<City> cities, ArrayList<Mines> mines) {
		String expression = null;

		if (commandArray.get(0).toLowerCase().equals("feed")) {
			expression = processFeed(commandArray, cities, mines);
		} else if (commandArray.get(0).toLowerCase().equals("transfer")) {
			expression = processTransfer(commandArray, cities, mines);
		} else if (commandArray.get(0).toLowerCase().equals("build")) {
			expression = processBuild(commandArray, cities, mines);
		} else if (commandArray.get(0).toLowerCase().equals("help")) {
			expression = processHelp(commandArray, cities, mines);
		} else if (commandArray.get(0).toLowerCase().equals("quit")) {
			processQuit();
		} else {
			expression = invalid;
		}
		
		return expression;
	}
	
	/*
	 * 	Takes an ArrayList of Strings called commandArray that should be of the form:
	 * 	"feed him # from city/mine"
	 * 
	 *  where # is the number to feed and city/mine is a mine name
	 */
	private static String processFeed(ArrayList<String> commandArray, ArrayList<City> cities, ArrayList<Mines> mines) {		
		if (!commandArray.get(1).toLowerCase().equals("him")) {
			return invalid + commandArray.get(1);
		}	
		
		if (Integer.getInteger(commandArray.get(2)).intValue() < 0) {
			return "Sisyphus cannot consume (-) ppl";
		}		
		int numEaten = Integer.getInteger(commandArray.get(2)).intValue();
		
		if (commandArray.get(3).toLowerCase().equals("from")) {
			return invalid + commandArray.get(3);
		}
		
		for (City city : cities) {
			if (commandArray.get(4).toLowerCase().equals(city.getName().toLowerCase())) {
				city.transferPop(numEaten);
			}
		}
		
		for (Mines mine : mines) {
			if (commandArray.get(4).toLowerCase().equals(mine.getName().toLowerCase())) {
				mine.popEaten(numEaten);
			}
		}
		
		return "The city/mine " + commandArray.get(4) + " does not exist";
	}


	private static String processTransfer(ArrayList<String> commandArray, ArrayList<City> cities, ArrayList<Mines> mines) {
		if (Integer.getInteger(commandArray.get(1)).intValue() < 0) {
			return "Cannot transfer (-) ppl/res";
		}
		int numTrans = Integer.getInteger(commandArray.get(1)).intValue();
		
		if (!commandArray.get(2).toLowerCase().equals("ppl") && !commandArray.get(2).toLowerCase().equals("res")) {
			return invalid + commandArray.get(2);
		}
		
		int resourceType = RES;
		
		if (commandArray.get(2).toLowerCase().equals("ppl")) {
			resourceType = PPL;
		}
		
		if (!commandArray.get(3).toLowerCase().equals("from")) {
			return invalid + commandArray.get(3);
		}
		
		City srcCity = null;
		Mines srcMines = null;
		
		for (City city : cities) {
			if (commandArray.get(4).toLowerCase().equals(city.getName().toLowerCase())) {
				srcCity = city;
			}
		}
		
		for (Mines mine : mines) {
			if (commandArray.get(4).toLowerCase().equals(mine.getName().toLowerCase())) {
	//			mine.popEaten(numEaten);
			}
		}
		
		return null;
	}


	private static String processBuild(ArrayList<String> commandArray, ArrayList<City> cities, ArrayList<Mines> mines) {
		return null;
	}


	private static String processHelp(ArrayList<String> commandArray, ArrayList<City> cities, ArrayList<Mines> mines) {
		return null;
	}


	private static void processQuit() {
		Sisyphus.quit();
	}


	public static ArrayList<String> parseCommand(String command) {
		return null;
	}
}
